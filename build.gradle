plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-Forge-${mod_version}"
group = "${maven_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = archives_base_name
var realVersion = mod_version + '+forge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD          Snapshot are built nightly.
    // stable     #                 Stables are built at the discretion of the MCP team.
    // official   MCVersion         Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVer  Javadocs and parameters layered on top of Mojmaps from the ParchmentMC team.
    //
    // You must be aware of the Mojang license when using the 'official' / 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "official", version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'

            // These arguments allow for optional authentication with Mojang servers.
            // If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties.
            // By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows or ~/.gradle/gradle.properties on Linux/MacOS.
            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your Minecraft in-game username, not email
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                // Your current access token. When it expires, you need to retrieve a new one and regenerate your run configurations.
                // You may be able to find it in your .minecraft folder in launcher_accounts.json or launcher_profiles.json.
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated_converted/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url "https://maven.su5ed.dev/releases"
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    implementation("io.github.llamalad7:mixinextras-forge:0.3.2")

    compileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}")

    implementation fg.deobf("dev.architectury:architectury-forge:${project.architectury_version}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${project.rei_version}")
    compileOnly "me.shedaniel:REIPluginCompatibilities-forge-annotations:12.+"

    implementation fg.deobf("curse.maven:farmers-delight-398521:4679319")
    //implementation fg.deobf("curse.maven:jei-238222:4175833")
    implementation fg.deobf("maven.modrinth:jade:${project.jade_version}+forge")
    implementation fg.deobf("maven.modrinth:kiwi:${project.kiwi_version}+forge")
    annotationProcessor "maven.modrinth:kiwi:${project.kiwi_version}+forge"
//    implementation fg.deobf("libs:Kiwi-1.20.1-forge:11.5.0")
//    annotationProcessor "libs:Kiwi-1.20.1-forge:11.5.0"
    implementation fg.deobf("maven.modrinth:lychee:qwaP2Vvx")
    implementation fg.deobf("maven.modrinth:supplementaries:16GEKSIv")
    implementation fg.deobf("maven.modrinth:moonlight:Jv6lR8aV")
    implementation fg.deobf("maven.modrinth:curios:3VUlU5Ga")
    implementation fg.deobf("maven.modrinth:suggestion-tweaker:1.20-1.5.1+forge")

//    compileOnly "dev.su5ed.sinytra.fabric-api:fabric-api:${project.ffapi_version}"
    compileOnly(jarJar("dev.su5ed.sinytra:fabric-loader:2.7.4+0.15.3+1.20.1")) {
        jarJar.ranged(it, "[2,)")
        transitive(false)
    }
    compileOnly(jarJar("dev.su5ed.sinytra.fabric-api:fabric-biome-api-v1:13.0.13+dc36698e77")) {
        jarJar.ranged(it, "[13.0.13,)")
        transitive(false)
    }
    compileOnly(jarJar("dev.su5ed.sinytra.fabric-api:fabric-resource-loader-v0:0.11.10+bcd08ed377")) {
        jarJar.ranged(it, "[0.11.10,)")
        transitive(false)
    }
    compileOnly(jarJar("dev.su5ed.sinytra.fabric-api:fabric-convention-tags-v1:1.5.5+fa3d1c0177")) {
        jarJar.ranged(it, "[1.5.5,)")
        transitive(false)
    }
    compileOnly(jarJar("dev.su5ed.sinytra.fabric-api:fabric-recipe-api-v1:1.0.21+514a076577")) {
        jarJar.ranged(it, "[1.0.21,)")
        transitive(false)
    }
    runtimeOnly fg.deobf("dev.su5ed.sinytra.fabric-api:fabric-api:${project.ffapi_version}")
}

processResources {
    exclude "/assets/${project.mod_id}/lang/en_us.existing.yaml"
    exclude "/snownee/fruits/command"
    exclude '**/*.bat'
    exclude '**/*.psd'
}

tasks.jarJar.configure {
    archiveClassifier = ''

    finalizedBy('reobfJarJar')
}

jar {
    archiveClassifier = 'slim'

    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : realVersion,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    preserveFileTimestamps = false
    reproducibleFileOrder = true

    finalizedBy('reobfJar')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = ["1.20", "1.20.1"]
        gameLoaders = ["forge", "neoforge"]

        mainPublication tasks.jarJar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "355467" // Required, must be a string, ID of CurseForge project

                relations { // Optional, Inferred from the relations above by default
                    depends "kiwi"
                    depends "lychee"
                    optional "jade"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "4bZDWNlG" // Required, must be a string, ID of Modrinth project

                relations { // Optional, Inferred from the relations above by default
                    depends "kiwi"
                    depends "lychee"
                    optional "jade"
                }
            }
        }
    }
}
